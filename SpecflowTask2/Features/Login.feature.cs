// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowTask2.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Seller Login")]
    public partial class SellerLoginFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Seller Login", "In order to add profile details\r\nAs a registered member\r\nSeller need to login wit" +
                    "h correct credentials", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I enter correct credentials I should be successfully loginIn")]
        [NUnit.Framework.CategoryAttribute("Home")]
        public virtual void WhenIEnterCorrectCredentialsIShouldBeSuccessfullyLoginIn()
        {
            string[] tagsOfScenario = new string[] {
                    "Home"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I enter correct credentials I should be successfully loginIn", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.Given("I Launched the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.And("I Click Login link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.When("I enter \"sidra_riz@yahoo.com\" in username and \"sid6638659\" in password field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.And("I click on Login Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.Then("I should be directed to profile page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On filling my details on Joining form I should be registered successfully")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("Join")]
        [NUnit.Framework.TestCaseAttribute("123456", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("#$%@#", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("123$@^", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Registeration sucessful", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This name has already been used to register an account", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "123456", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "#$%@#", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "123$@^", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This email has already been used to register an account", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "abcd@123.com", "123456", "123456", "This email is not valid", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "abcd123.com", "123456", "123456", "Please enter a valid email address", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "", "123456", "123456", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "12345", "12345", "Password must be at least 6 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "", "", "These fields are required", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "1234567", "123456", "password does not match password", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidr_riz@yahoo.com", "123&*%", "123&*%", "Registeration sucessful", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "123456", "1234567", "Does not match password", null)]
        public virtual void OnFillingMyDetailsOnJoiningFormIShouldBeRegisteredSuccessfully(string firstname, string lastname, string emailaddress, string password, string confirmpassword, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Home",
                    "Join"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Firstname", firstname);
            argumentsOfScenario.Add("Lastname", lastname);
            argumentsOfScenario.Add("Emailaddress", emailaddress);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Confirmpassword", confirmpassword);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On filling my details on Joining form I should be registered successfully", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
   testRunner.Given("I Launched the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
   testRunner.And("I click on Join Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
   testRunner.When(string.Format("I fill the form with {0} {1} {2} {3} and {4}", firstname, lastname, emailaddress, password, confirmpassword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
   testRunner.And("Check the Terms and conditions box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
   testRunner.And("I Click the Join button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
   testRunner.Then(string.Format("{0} should be displayed", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
   testRunner.And("I should be directed to the SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
